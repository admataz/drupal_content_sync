<?php
/**
 * tell other sites' enpoint that there has been an update
 */


/**
 * Implements hook_menu().
 */
function content_sync_dest_menu() {
    $items['admin/content/sync_dest_settings'] = array(
        'title' => 'Update content sync destination settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array(
            'content_sync_dest_settings_form'
        ) ,
        'access arguments' => array(
            'administer pinger updates'
        ) ,
        'type' => MENU_NORMAL_ITEM,
    );

    $items[variable_get('content_sync_dest_api_endpoint', 'default_api_endpoint')] = array(
      'title' => 'API endpoint',
      'page callback' => 'content_sync_dest_receive_ping',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
      );

    return $items;
}





/**
 * Implements hook_permission().
 */
function content_sync_dest_permission() {
    return array(
        /*
         *'administer my module' =>  array(
         *  'title' => t('Administer my module'),
         *  'description' => t('Perform administration tasks for my module.'),
         *),
        */
        'administer pinger updates' => array(
            'title' => t('Administer pinger updates') ,
            'description' => t('Allow user to add to list of subscribers to site updates') ,
        ) ,
    );
}

/**
 * settings form
 */
function content_sync_dest_settings_form($form, &$form_state) {
    $node_types = node_type_get_names();
    $vocabulary_objs = taxonomy_vocabulary_get_names();
    $vocabularies = array();//();
    

    foreach ($vocabulary_objs as $vid => $obj) {
        $vocabularies[$vid] = $obj->name;
    }


    $form['content_sync_dest_api_endpoint'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('content_sync_dest_api_endpoint', ''),
      '#title' => 'API endpoint path: '.url($base_url, array('absolute'=>true)).'+',
      '#description' => t('You need to provide a path from the root which will be the base URL (from your Drupal root) for comminicating with this server.'),
    );

    $form['content_sync_dest_trusted_sources'] = array(
      '#type' => 'textarea',
      '#title' => 'List of trusted source domains (1 per line)',
      '#description' => t('If this is a destination site, you need to provide URLs of sources'),
      '#default_value' => variable_get('content_sync_dest_trusted_sources', '')
    );


    $form['content_sync_dest_node_types'] = array(
      '#type' => 'checkboxes',
      '#options' => $node_types,
      '#description' => t('To be sure we are updating the expected content types (these will have to be configured as the source)'),
      '#title' => 'content types to sync',
      '#default_value' => variable_get('content_sync_dest_node_types', '')
    );

    $form['content_sync_dest_vocabularies'] = array(
      '#type' => 'checkboxes',
      '#options' => $vocabularies,
      '#description' => t('To be sure we are updating the expected vocabularies (these will have to be configured as the source)'),
      '#title' => 'taxonomy vocabularies sync',
      '#default_value' => variable_get('content_sync_dest_vocabularies', '')
    );


    return system_settings_form($form);
}



/**
 * Implements hook_entity_update().
 */
function content_sync_dest_entity_update($entity, $type) {
  _content_sync_dest_ping_remotes($entity, $type, 'update');
}



/**
 * Implements hook_entity_insert().
 */
function content_sync_dest_entity_insert($entity, $type) {
  _content_sync_dest_ping_remotes($entity, $type, 'insert');
}


/**
 * Implements hook_taxonomy_vocabulary_update().
 */
function content_sync_dest_taxonomy_vocabulary_update($vocabulary) {
  _content_sync_dest_ping_remotes($vocabulary, 'taxonomy_vocabulary', 'update');
}


/**
 * Implements hook_taxonomy_vocabulary_insert().
 */
function content_sync_dest_taxonomy_vocabulary_insert($vocabulary) {
  _content_sync_dest_ping_remotes($vocabulary, 'taxonomy_vocabulary', 'insert');
}



/**
 * TODO: support remote deletion of nodes??
 */


function _content_sync_dest_prepare_ping_payload($entity, $type){
  $payload = array();
  $payload['type'] = $entity->type; 
  
  if($type == 'node'){
    $types = variable_get('content_sync_dest_node_types', array());
    if(in_array($entity->type, $types)){
      $payload['type'] = $entity->type; 
      $payload['entitytype'] = $type; 
      $payload['id'] = $entity->nid; 
    }
  }

  if($type == 'taxonomy_term'){
      $payload['entitytype'] = $type; 
      $payload['id'] = $entity->tid; 
  }


  if($type == 'taxonomy_vocabulary'){
      $payload['entitytype'] = $type; 
      $payload['id'] = $entity->tid; 
  }

  return $payload;
}


function _content_sync_dest_ping_remotes($entity, $type, $action){
    
    $payload = _content_sync_dest_prepare_ping_payload($entity, $type);

    

    $data = drupal_json_encode($payload);

    $endpoints = explode('\n',variable_get('content_sync_dest_subscribed_urls',''));

    if(is_array($endpoints)){

    }

    drupal_http_request($e, array(
      'headers' => array('Content-type'=>'application/json'),
      'method' => $action,
      'data' => $data,
      ));

}




function content_sync_dest_receive_ping(){
  $request_method = strtoupper($_SERVER['REQUEST_METHOD']);


  if ($request_method == 'POST') {
    

  }
  if ($request_method == 'PUT') {
    
    
  }

}



/*
headers: An array containing request headers to send as name/value pairs.
method: A string containing the request method. Defaults to 'GET'.
data: A string containing the request body, formatted as 'param=value&param=value&...'. Defaults to NULL.
max_redirects: An integer representing how many times a redirect may be followed. Defaults to 3.
timeout: A float representing the maximum number of seconds the function call may take. The default is 30 seconds. If a timeout occurs, the error code is set to the HTTP_REQUEST_TIMEOUT constant.
context: A context resource created with stream_context_create().
 */




